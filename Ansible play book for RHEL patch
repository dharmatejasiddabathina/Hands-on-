---
## demo ansible play book to perform patching on RHEL 
## serial 2 means number hosts executing at one time in this 2 can execute at one time

- hosts: dev
  become_user:root
  serial: 2

   tasks:
    
       # to check weather the app is running or stopped
       - name : verify app is not running 
         shell: if ps -ef| egrep 'apache|http'| grep -v grep > /dev/null ;then echo'process is running '; else echo 'process is not running';fi
         ignore_errors:true
         register: app_process_check
  
        
        # this task is decision , play will fail/quite, if application is running 
         -name: decision point to start patching 
 	  fail: msg="{{ inventory_hostname }} have running application.please stop the application, then attempt the pathcing"
	  when: app_process_check.stdout == "process_running"
  
         
        # this task will upgrade/install the rpm's if application stopped
         -name: upgrade all packages on server 
           yum:
             name="kernal"
             state=latest
             when:app_process_check.stdout == "process_not_running" and ansible_distribution == 'Red Hat Enterprise Linux'
             register: yum_update

        #this task is to check if kernal update happend and system needs reboot or not
         -name:check if the reboot is required after the kernal update
          shell: KERNAL_NEW=$(rpm -q --last kernal |head -l | awk '{print $1}| sed 's/kernal-//'}; KERNAL_NOW=$(uname -r}; if[[ $KERNEL_NEW != $KERNAL_NOW]]; then echo "reboot_needed"; else reboot_notneeded;fi
          ignore_errors: true
          register : reboot_required


          #this task is to restart the system
          -name : restart system
           command : shutdown -r +1 "Rebooting the system after patching "
           async:0
           poll:0
           when:reboot_required.stdout == "reboot_required"
           register: reboot_started
           ignore_errors: true

           
           #this task is to wait for 3 min for syatem to come up after the reboot.
           -name: pause for 180 sec 
            pause:
              minutes:3

           #this task is to confirm , system is up and resonding to ssh 
           -name : check if the syatem is resonding to ssh 
            local_action:
            module: wait_for
            host ={{invertory_hostname}}
            port=22
            delay=15
            timeout=300
            state=started 
         when:reboot_started|chnaged           


     

   
